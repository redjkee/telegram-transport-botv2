# bot.py (–í–ï–†–°–ò–Ø 6.0 - –ù–û–†–ú–ê–õ–ò–ó–û–í–ê–ù–ù–ê–Ø –ë–î, –ü–û–õ–ù–´–ô –ö–û–î)

import os
import logging
import pandas as pd
import io
import asyncio
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    ApplicationBuilder,
    ContextTypes,
    CommandHandler,
    MessageHandler,
    filters,
    CallbackQueryHandler,
    ConversationHandler
)
from telegram.error import BadRequest
import threading
from http.server import BaseHTTPRequestHandler, HTTPServer
from parser import process_excel_file
import db

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ ---
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logging.getLogger("httpx").setLevel(logging.WARNING)

(ASK_CAR_STATS, ASK_DRIVER_STATS, ASK_CAR_EXPORT, ASK_DRIVER_EXPORT) = range(4)

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ---
def get_main_menu_keyboard():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data='main_stats')],
        [InlineKeyboardButton("üöó –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≥–æ—Å. –Ω–æ–º–µ—Ä—É", callback_data='main_ask_car_stats')],
        [InlineKeyboardButton("üë§ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ñ–∞–º–∏–ª–∏–∏", callback_data='main_ask_driver_stats')],
        [InlineKeyboardButton("üì• –≠–∫—Å–ø–æ—Ä—Ç –≤ Excel", callback_data='main_export_menu')],
        [InlineKeyboardButton("üèÜ –¢–æ–ø-5", callback_data='main_top')],
        [InlineKeyboardButton("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", callback_data='main_clear')],
    ])
def get_export_menu_keyboard():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üìÑ –ü–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç", callback_data='export_full')],
        [InlineKeyboardButton("üöó –ü–æ –≥–æ—Å. –Ω–æ–º–µ—Ä—É", callback_data='export_ask_car')],
        [InlineKeyboardButton("üë§ –ü–æ —Ñ–∞–º–∏–ª–∏–∏", callback_data='export_ask_driver')],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='back_to_main_menu')],
    ])
post_upload_keyboard = InlineKeyboardMarkup([
    [InlineKeyboardButton("üìä –û—Ç—á–µ—Ç –ø–æ –∞–≤—Ç–æ", callback_data='summary_car')],
    [InlineKeyboardButton("üë§ –û—Ç—á–µ—Ç –ø–æ –≤–æ–¥–∏—Ç–µ–ª—è–º", callback_data='summary_driver')],
    [InlineKeyboardButton("‚¨ÖÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='back_to_main_menu')]
])
cancel_keyboard = InlineKeyboardMarkup([[InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data='cancel_conversation')]])
back_to_main_menu_keyboard = InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='back_to_main_menu')]])

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î ---
async def post_init(application: Application):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –æ–¥–∏–Ω —Ä–∞–∑ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è Application, –Ω–æ –¥–æ –∑–∞–ø—É—Å–∫–∞ polling."""
    if not await db.init_db():
        logging.critical("CRITICAL: Could not initialize database. Bot will not function correctly.")

# --- –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏ –Ω–∞–≤–∏–≥–∞—Ü–∏—è ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ."""
    await db.get_or_create_user(update)
    user_id = update.effective_user.id
    welcome_text = (
        "üëã **–ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π –±–æ—Ç v6.0 (Normalized DB)**\n\n"
        "–≠—Ç–æ—Ç –±–æ—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –æ—Ç—á–µ—Ç–æ–≤ –æ –ø–æ–µ–∑–¥–∫–∞—Ö. "
        "–í—Å–µ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –Ω–∞–¥–µ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ —Ä–µ–ª—è—Ü–∏–æ–Ω–Ω–æ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."
    )
    df = await db.get_all_trips_as_df(user_id)
    if not df.empty:
        processed_files = await db.get_processed_files(user_id)
        welcome_text += (
            f"\n\n**–¢–µ–∫—É—â–∞—è —Å–µ—Å—Å–∏—è:**\n"
            f"‚ñ´Ô∏è –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(processed_files)}\n"
            f"‚ñ´Ô∏è –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {len(df)}\n"
            f"‚ñ´Ô∏è –û–±—â–∏–π –¥–æ—Ö–æ–¥: *{df['–°—Ç–æ–∏–º–æ—Å—Ç—å'].sum():,.0f} —Ä—É–±.*"
        )
    if update.callback_query:
        await update.callback_query.edit_message_text(welcome_text, reply_markup=get_main_menu_keyboard(), parse_mode='Markdown')
    else:
        await update.message.reply_text(welcome_text, reply_markup=get_main_menu_keyboard(), parse_mode='Markdown')
    return ConversationHandler.END

# --- –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ ---
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await db.get_or_create_user(update)
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    command = query.data
    try:
        df = await db.get_all_trips_as_df(user_id)
        has_data = not df.empty
        if command == 'back_to_main_menu':
            await start(update, context)
            return
        if command == 'main_export_menu':
            await query.edit_message_text("üì• **–≠–∫—Å–ø–æ—Ä—Ç –≤ Excel**\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ç—á–µ—Ç–∞:", reply_markup=get_export_menu_keyboard(), parse_mode='Markdown')
            return
        if command == 'main_clear':
            await db.clear_user_data(user_id)
            await query.edit_message_text("üóëÔ∏è –í—Å–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã.", reply_markup=back_to_main_menu_keyboard)
            return
        if not has_data:
            await query.edit_message_text("‚ÑπÔ∏è –î–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç. –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª—ã.", reply_markup=back_to_main_menu_keyboard)
            return
        if command == 'main_stats':
            processed_files = await db.get_processed_files(user_id)
            message = (f"üìä *–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞*\n\n‚ñ´Ô∏è –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(processed_files)}\n‚ñ´Ô∏è –í—Å–µ–≥–æ –º–∞—Ä—à—Ä—É—Ç–æ–≤: {len(df)}\n‚ñ´Ô∏è –û–±—â–∏–π –∑–∞—Ä–∞–±–æ—Ç–æ–∫: *{df['–°—Ç–æ–∏–º–æ—Å—Ç—å'].sum():,.2f} —Ä—É–±.*\n‚ñ´Ô∏è –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –º–∞—à–∏–Ω: {df['–ì–æ—Å_–Ω–æ–º–µ—Ä'].nunique()}\n‚ñ´Ô∏è –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –≤–æ–¥–∏—Ç–µ–ª–µ–π: {df['–í–æ–¥–∏—Ç–µ–ª—å'].nunique()}")
            await query.edit_message_text(message, parse_mode='Markdown', reply_markup=back_to_main_menu_keyboard)
        elif command == 'main_top':
            top_drivers = df.groupby('–í–æ–¥–∏—Ç–µ–ª—å')['–°—Ç–æ–∏–º–æ—Å—Ç—å'].sum().nlargest(5)
            top_drivers_text = "".join([f"{i}. {d} - {t:,.0f} —Ä—É–±.\n" for i, (d, t) in enumerate(top_drivers.items(), 1)])
            top_cars = df.groupby('–ì–æ—Å_–Ω–æ–º–µ—Ä')['–°—Ç–æ–∏–º–æ—Å—Ç—å'].sum().nlargest(5)
            top_cars_text = "".join([f"{i}. –ù–æ–º–µ—Ä {c} - {t:,.0f} —Ä—É–±.\n" for i, (c, t) in enumerate(top_cars.items(), 1)])
            message = (f"üèÜ *–¢–æ–ø-5 –ø–æ –∑–∞—Ä–∞–±–æ—Ç–∫—É*\n\nüë§ *–õ—É—á—à–∏–µ –≤–æ–¥–∏—Ç–µ–ª–∏:*\n{top_drivers_text or '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}\nüöó *–°–∞–º—ã–µ –ø—Ä–∏–±—ã–ª—å–Ω—ã–µ –º–∞—à–∏–Ω—ã:*\n{top_cars_text or '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}")
            await query.edit_message_text(message, parse_mode='Markdown', reply_markup=back_to_main_menu_keyboard)
        elif command == 'export_full':
            await send_excel_report(df, query.message.chat_id, context, "–ø–æ–ª–Ω—ã–π_–æ—Ç—á–µ—Ç.xlsx")
            await context.bot.send_message(query.message.chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=back_to_main_menu_keyboard)
        elif command == 'summary_car' or command == 'summary_driver':
            group_by_col = '–ì–æ—Å_–Ω–æ–º–µ—Ä' if command == 'summary_car' else '–í–æ–¥–∏—Ç–µ–ª—å'
            title = "üöó –°–≤–æ–¥–∫–∞ –ø–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è–º" if command == 'summary_car' else "üë§ –°–≤–æ–¥–∫–∞ –ø–æ –≤–æ–¥–∏—Ç–µ–ª—è–º"
            summary = df.groupby(group_by_col)['–°—Ç–æ–∏–º–æ—Å—Ç—å'].sum().sort_values(ascending=False)
            summary_text = f"**{title}**\n\n"
            for item, total in summary.items():
                summary_text += f"‚ñ´Ô∏è {item}: *{total:,.0f} —Ä—É–±.*\n"
            await query.edit_message_text(summary_text, parse_mode='Markdown', reply_markup=back_to_main_menu_keyboard)
    except BadRequest as e:
        if "Message is not modified" in str(e): logging.info("Ignoring 'Message is not modified' error.")
        else: logging.error(f"An unexpected BadRequest error occurred: {e}")
    except Exception as e:
        logging.error(f"An error occurred in button_callback: {e}")
        try: await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.", reply_markup=back_to_main_menu_keyboard)
        except Exception as e2: logging.error(f"Could not send error message to user: {e2}")

# --- –õ–æ–≥–∏–∫–∞ –¥–∏–∞–ª–æ–≥–æ–≤ ---
async def ask_for_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await db.get_or_create_user(update)
    query = update.callback_query
    await query.answer()
    action = query.data
    if action == 'main_ask_car_stats':
        await query.edit_message_text("üî¢ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ 3 —Ü–∏—Ñ—Ä—ã –≥–æ—Å. –Ω–æ–º–µ—Ä–∞:", reply_markup=cancel_keyboard)
        return ASK_CAR_STATS
    elif action == 'main_ask_driver_stats':
        await query.edit_message_text("üë§ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é –≤–æ–¥–∏—Ç–µ–ª—è:", reply_markup=cancel_keyboard)
        return ASK_DRIVER_STATS
    elif action == 'export_ask_car':
        await query.edit_message_text("üî¢ –í–≤–µ–¥–∏—Ç–µ –≥–æ—Å. –Ω–æ–º–µ—Ä –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –æ—Ç—á–µ—Ç–∞:", reply_markup=cancel_keyboard)
        return ASK_CAR_EXPORT
    elif action == 'export_ask_driver':
        await query.edit_message_text("üë§ –í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –æ—Ç—á–µ—Ç–∞:", reply_markup=cancel_keyboard)
        return ASK_DRIVER_EXPORT
async def handle_car_stats_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await db.get_or_create_user(update)
    user_input = update.message.text
    user_id = update.effective_user.id
    df = await db.get_all_trips_as_df(user_id)
    car_df = df[df['–ì–æ—Å_–Ω–æ–º–µ—Ä'].astype(str).str.contains(user_input, case=False, na=False)]
    if car_df.empty:
        await update.message.reply_text(f"‚ùå –ú–∞—à–∏–Ω–∞ —Å –Ω–æ–º–µ—Ä–æ–º '{user_input}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–û—Ç–º–µ–Ω–∞'.", reply_markup=cancel_keyboard)
        return ASK_CAR_STATS
    drivers = ", ".join(car_df['–í–æ–¥–∏—Ç–µ–ª—å'].unique())
    message = (f"üöó *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –º–∞—à–∏–Ω–µ {user_input}*\n\n‚ñ´Ô∏è –°–æ–≤–µ—Ä—à–µ–Ω–æ –º–∞—Ä—à—Ä—É—Ç–æ–≤: {len(car_df)}\n‚ñ´Ô∏è –û–±—â–∏–π –∑–∞—Ä–∞–±–æ—Ç–æ–∫: *{car_df['–°—Ç–æ–∏–º–æ—Å—Ç—å'].sum():,.2f} —Ä—É–±.*\n‚ñ´Ô∏è –í–æ–¥–∏—Ç–µ–ª–∏: {drivers}")
    await update.message.reply_text(message, parse_mode='Markdown', reply_markup=back_to_main_menu_keyboard)
    return ConversationHandler.END
async def handle_driver_stats_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await db.get_or_create_user(update)
    user_input = update.message.text
    user_id = update.effective_user.id
    df = await db.get_all_trips_as_df(user_id)
    driver_df = df[df['–í–æ–¥–∏—Ç–µ–ª—å'].str.contains(user_input, case=False, na=False)]
    if driver_df.empty:
        await update.message.reply_text(f"‚ùå –í–æ–¥–∏—Ç–µ–ª—å '{user_input}' –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–û—Ç–º–µ–Ω–∞'.", reply_markup=cancel_keyboard)
        return ASK_DRIVER_STATS
    cars = ", ".join(driver_df['–ì–æ—Å_–Ω–æ–º–µ—Ä'].unique())
    message = (f"üë§ *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤–æ–¥–∏—Ç–µ–ª—é {user_input}*\n\n‚ñ´Ô∏è –°–æ–≤–µ—Ä—à–µ–Ω–æ –º–∞—Ä—à—Ä—É—Ç–æ–≤: {len(driver_df)}\n‚ñ´Ô∏è –û–±—â–∏–π –∑–∞—Ä–∞–±–æ—Ç–æ–∫: *{driver_df['–°—Ç–æ–∏–º–æ—Å—Ç—å'].sum():,.2f} —Ä—É–±.*\n‚ñ´Ô∏è –ú–∞—à–∏–Ω—ã: {cars}")
    await update.message.reply_text(message, parse_mode='Markdown', reply_markup=back_to_main_menu_keyboard)
    return ConversationHandler.END
async def handle_car_export_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await db.get_or_create_user(update)
    user_input = update.message.text
    user_id = update.effective_user.id
    df = await db.get_all_trips_as_df(user_id)
    car_df = df[df['–ì–æ—Å_–Ω–æ–º–µ—Ä'].astype(str).str.contains(user_input, case=False, na=False)]
    if car_df.empty:
        await update.message.reply_text(f"‚ùå –ú–∞—à–∏–Ω–∞ '{user_input}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ —ç–∫—Å–ø–æ—Ä—Ç.", reply_markup=cancel_keyboard)
        return ASK_CAR_EXPORT
    await send_excel_report(car_df, update.message.chat_id, context, f"–æ—Ç—á–µ—Ç_–º–∞—à–∏–Ω–∞_{user_input}.xlsx")
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=back_to_main_menu_keyboard)
    return ConversationHandler.END
async def handle_driver_export_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await db.get_or_create_user(update)
    user_input = update.message.text
    user_id = update.effective_user.id
    df = await db.get_all_trips_as_df(user_id)
    driver_df = df[df['–í–æ–¥–∏—Ç–µ–ª—å'].str.contains(user_input, case=False, na=False)]
    if driver_df.empty:
        await update.message.reply_text(f"‚ùå –í–æ–¥–∏—Ç–µ–ª—å '{user_input}' –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ —ç–∫—Å–ø–æ—Ä—Ç.", reply_markup=cancel_keyboard)
        return ASK_DRIVER_EXPORT
    await send_excel_report(driver_df, update.message.chat_id, context, f"–æ—Ç—á–µ—Ç_–≤–æ–¥–∏—Ç–µ–ª—å_{user_input}.xlsx")
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=back_to_main_menu_keyboard)
    return ConversationHandler.END
async def send_excel_report(df: pd.DataFrame, chat_id: int, context: ContextTypes.DEFAULT_TYPE, filename: str):
    output = io.BytesIO()
    with pd.ExcelWriter(output, engine='xlsxwriter') as writer:
        df.to_excel(writer, index=False, sheet_name='–û—Ç—á–µ—Ç')
        worksheet = writer.sheets['–û—Ç—á–µ—Ç']
        for idx, col in enumerate(df):
            max_len = max((df[col].astype(str).map(len).max(), len(str(df[col].name)) + 1))
            worksheet.set_column(idx, idx, max_len)
    output.seek(0)
    await context.bot.send_document(chat_id=chat_id, document=output, filename=filename, caption='üìä –í–∞—à –æ—Ç—á–µ—Ç –≥–æ—Ç–æ–≤.')
async def cancel_conversation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await db.get_or_create_user(update)
    query = update.callback_query
    await query.answer()
    await query.edit_message_text("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=back_to_main_menu_keyboard)
    return ConversationHandler.END
async def handle_document(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await db.get_or_create_user(update)
    user_id = update.effective_user.id
    file = await update.message.document.get_file()
    file_name = update.message.document.file_name
    processed_files = await db.get_processed_files(user_id)
    if file_name in processed_files:
        await update.message.reply_text(f"‚ö†Ô∏è –§–∞–π–ª '{file_name}' —É–∂–µ –±—ã–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω —Ä–∞–Ω–µ–µ. –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–ø—É—â–µ–Ω–∞.")
        return
    await update.message.reply_text(f"‚è≥ –ü–æ–ª—É—á–∏–ª —Ñ–∞–π–ª '{file_name}'. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é...")
    file_content = await file.download_as_bytearray()
    new_df = process_excel_file(bytes(file_content), file_name)
    if new_df is None or new_df.empty:
        await update.message.reply_text(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞ '{file_name}'.")
        return
    await db.add_trips_from_df(user_id, new_df)
    full_df = await db.get_all_trips_as_df(user_id)
    message_text = (f"‚úÖ –§–∞–π–ª '{file_name}' —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!\n"
                    f"–î–æ–±–∞–≤–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {len(new_df)}\n"
                    f"–í—Å–µ–≥–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {len(full_df)}\n\n"
                    "–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?")
    await update.message.reply_text(message_text, reply_markup=post_upload_keyboard)
class HealthCheckHandler(BaseHTTPRequestHandler):
    def do_GET(self): self.send_response(200); self.send_header("Content-type", "text/plain"); self.end_headers(); self.wfile.write(b"Bot is alive")
    def do_HEAD(self): self.send_response(200); self.send_header("Content-type", "text/plain"); self.end_headers()
    def log_message(self, format, *args): return
def run_health_check_server():
    port = int(os.environ.get("PORT", 8080)); httpd = HTTPServer(('', port), HealthCheckHandler); httpd.serve_forever()

if __name__ == '__main__':
    TOKEN = os.getenv('TELEGRAM_TOKEN')
    if not TOKEN: raise ValueError("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM_TOKEN")
    application = ApplicationBuilder().token(TOKEN).post_init(post_init).build()
    conv_handler = ConversationHandler(
        entry_points=[
            CallbackQueryHandler(ask_for_input, pattern='^main_ask_car_stats$'),
            CallbackQueryHandler(ask_for_input, pattern='^main_ask_driver_stats$'),
            CallbackQueryHandler(ask_for_input, pattern='^export_ask_car$'),
            CallbackQueryHandler(ask_for_input, pattern='^export_ask_driver$'),
        ],
        states={
            ASK_CAR_STATS: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_car_stats_input)],
            ASK_DRIVER_STATS: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_driver_stats_input)],
            ASK_CAR_EXPORT: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_car_export_input)],
            ASK_DRIVER_EXPORT: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_driver_export_input)],
        },
        fallbacks=[
            CommandHandler('start', start),
            CallbackQueryHandler(cancel_conversation, pattern='^cancel_conversation$')
        ],
        per_message=False
    )
    application.add_handler(CommandHandler('start', start))
    application.add_handler(conv_handler)
    application.add_handler(CallbackQueryHandler(button_handler))
    application.add_handler(MessageHandler(filters.Document.ALL, handle_document))
    threading.Thread(target=run_health_check_server, daemon=True).start()
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏ (v6.0 - –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è –ë–î)...")
    application.run_polling()
